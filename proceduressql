/* Find all mail postal code, */
CREATE OR REPLACE PROCEDURE GetMailByAddress(address in varchar2) as
--variables
  mID varchar2(64);
  rID varchar2(64);
  pCode varchar2(64);
  weight number(5);
CURSOR csr is 
  select mailid, routeid,pCode, weight into mID, rID, pCode, weight from mail
  join postalcode using(postalcode)
  where deliveryaddress = address;
  
BEGIN
--carriers view the mailroute and truck are assigned to
 open csr;
  dbms_output.put_line('ALL mail for Address '||address);
 loop fetch csr into mID, rID, pCode, weight  ;
 exit when csr%notfound;
 dbms_output.put_line('MailID  '||mID);
 dbms_output.put_line('RouteID  '||rID);
 dbms_output.put_line('pCode  '||pCode);
 dbms_output.put_line('Weight  '||weight);
 end loop;
 close csr;
EXCEPTION
   WHEN NO_DATA_FOUND then 
    	dbms_output.put_line('No Mail for this address'||address);
END;
execute GetMailByAddress('88 Melby Terrace');



/* Find all mail postal code, */
CREATE OR REPLACE PROCEDURE GetMailByPostalCode(pCode in varchar2) as
--variables
  mID varchar2(64);
  address varchar2(64);
  weight number(5);
CURSOR csr is 
  select mailid, deliveryaddress, weight into mID, address, weight from mail
  where postalcode = pCode;
  
BEGIN
--carriers view the mailroute and truck are assigned to
 open csr;
  dbms_output.put_line('ALL mail for PostalCode '||pCode);
 loop fetch csr into mID, address,weight  ;
 exit when csr%notfound;
 dbms_output.put_line('MailID  '||mID);
 --dbms_output.put_line('PostalCode  '||pCode);
 dbms_output.put_line('Address  '||address);
 dbms_output.put_line('Weight  '||weight);
 end loop;
 close csr;
EXCEPTION
   WHEN NO_DATA_FOUND then 
    	dbms_output.put_line('No Mail for this postalcode'||pCode);
END;
execute GetMailByPostalCode('HAT 1W3');


/* Find all mail based on route,*/
CREATE OR REPLACE PROCEDURE GetMailByRouteID(rID in varchar2) as
--variables
  mID varchar2(64);
  pCode varchar2(64);
  address varchar2(64);
  weight number(5,3);
CURSOR csr is 
  select mailid, postalcode, address, weight into mID, pCode, address, weight from routes
  Join postalcode using(routeid)
  join mail using(postalcode)
  where routeid = rID;
  
BEGIN
--carriers view the mailroute and truck are assigned to
 open csr;
  dbms_output.put_line('ALL mail for route '||rID);
 loop fetch csr into mID, pCode, address,weight  ;
 exit when csr%notfound;
 dbms_output.put_line('MailID  '||mID);
 dbms_output.put_line('PostalCode  '||pCode);
 dbms_output.put_line('Address  '||address);
 dbms_output.put_line('Weight  '||weight);
 end loop;
 close csr;
EXCEPTION
   WHEN NO_DATA_FOUND then 
    	dbms_output.put_line('No Mail for this route'||rID);
END;
execute GetMailByRoute('R1');


CREATE or REPLACE FUNCTION FindReplacement(empId IN varchar2) RETURN varchar2
AS
    TYPE varchar64_va IS VARRAY(64) OF VARCHAR2(64);
    employeeIds varchar64_va; -- array of isbns for each book as varchar
    employeeRoute varchar(64);
    replacement varchar2(64);
    tempRouteId varchar2(64);
BEGIN
  select employeeid bulk collect into employeeIds from employees 
  where availability = 'available';
  
  if employeeIds.COUNT > 1 then
    --update employee that is calling in sick
    dbms_output.put_line(employeeIds(1) ||'found from select');
       if substr(empId, 1,2) = 'CA'then
       dbms_output.put_line(empId || 'input');
       select routeid into tempRouteId from carrier where employeeid = empId;
       dbms_output.put_line(tempRouteId);
       UPDATE carrier set routeid = tempRouteId where employeeId = empId;
       UpdateAvailability(empId, 'unavailable');
      end if;
  end if;
  RETURN tempRouteId;
END;
DECLARE
		replacement varchar2(64);
BEGIN
		replacement := FindReplacement('CA3');
		dbms_output.put_line(replacement);
END;

create or replace procedure UpdateAvailability(empId in varchar2, ablty in varchar2) as
--variables
emp varchar2(64);
BEGIN

SELECT employeeid INTO emp from employees where employeeid = empid;
       UPDATE employees set availability = ablty
        where employeeid = emp;
EXCEPTION
   WHEN NO_DATA_FOUND then 
    	dbms_output.put_line('UpdateAvailability - no employee with employee number '||empId);
      
END;
execute UpdateAvailability('CAA1', 'Available' );

  select employeeid from employees where employeeid = 'CA1';